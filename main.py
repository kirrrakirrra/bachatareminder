import asyncio
import datetime
import logging
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CallbackQueryHandler,
)
import os

logging.basicConfig(
    filename="bot.log",
    filemode="a",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
groups = [
    {
        "name": "–ë–∞—á–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞—à–∫–∏",
        "days": ["Monday", "Friday"],
        "time": {"Monday": "10:00", "Friday": "09:00"},
        "chat_id": os.getenv("CHAT_ID_BACHATA"),
    },
    {
        "name": "–ë–∞—á–∞—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—é—â. –≥—Ä—É–ø–ø–∞",
        "days": ["Monday", "Friday"],
        "time": {"Monday": "11:00", "Friday": "10:00"},
        "chat_id": os.getenv("CHAT_ID_BACHATA_ADV"),
    },
    {
        "name": "Solo latina",
        "days": ["Monday", "Thursday"],
        "time": {"Monday": "09:00", "Thursday": "12:00"},
        "chat_id": os.getenv("CHAT_ID_SOLO_LATINA"),
    },
    {
        "name": "–ú–∞–ª—ã—à–∏ 3-5 –ª–µ—Ç",
        "days": ["Tuesday", "Thursday"],
        "time": {"Tuesday": "19:00", "Thursday": "19:00"},
        "chat_id": os.getenv("CHAT_ID_KIDS_3_5"),
    },
    {
        "name": "–ú–∞–ª—ã—à–∏ 5-6 –ª–µ—Ç",
        "days": ["Monday", "Thursday"],
        "time": {"Monday": "17:00", "Thursday": "17:00"},
        "chat_id": os.getenv("CHAT_ID_KIDS_5_6"),
    },
    {
        "name": "–ü–∞—Ä—ã 7-13 –ª–µ—Ç",
        "days": ["Monday", "Thursday"],
        "time": {"Monday": "19:00", "Thursday": "18:00"},
        "chat_id": os.getenv("CHAT_ID_MIAMI_PAIRS"),
    },
]

pending = {}
last_check_date = None

def decision_keyboard(group_name):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"yes|{group_name}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"no|{group_name}")],
        [InlineKeyboardButton("‚è≠ –ù–µ—Ç, –Ω–æ —è —Å–∞–º–∞ –Ω–∞–ø–∏—à—É –≤ –≥—Ä—É–ø–ø—É", callback_data=f"skip|{group_name}")],
    ])

async def ask_admin(app, group, class_time):
    print(f"[ask_admin] –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ: {group['name']}, —á–∞—Ç: {group['chat_id']}",flush=True)
    print(f"[ask_admin] ADMIN_ID: {ADMIN_ID}",flush=True)
    msg = await app.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –∑–∞–Ω—è—Ç–∏–µ '{group['name']}' –≤ {class_time}?",
        reply_markup=decision_keyboard(group['name'])
    )
    pending[msg.message_id] = group

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, group_name = query.data.split("|")
    group = next((g for g in groups if g["name"] == group_name), None)

    now_utc = datetime.datetime.utcnow()
    now = now_utc + datetime.timedelta(hours=7)
    next_day = now + datetime.timedelta(days=1)
    weekday = next_day.strftime("%A")
    class_time = group["time"][weekday]

    if action == "yes":
        print(f"[callback] –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤: {group['name']}, —á–∞—Ç: {group['chat_id']}",flush=True)
        await context.bot.send_poll(
            chat_id=group["chat_id"],
            question=f"–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–µ –≤ {class_time}. –ö—Ç–æ –ø—Ä–∏–¥—ë—Ç?",
            options=["‚úÖ –ü—Ä–∏–¥—É", "‚ùå –ù–µ —Å–º–æ–≥—É"],
            is_anonymous=False,
        )
        await query.edit_message_text("–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ")

    elif action == "no":
        await context.bot.send_message(
            chat_id=group["chat_id"],
            text="–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç, –∑–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏—è –Ω–µ –±—É–¥–µ—Ç!"
        )
        await query.edit_message_text("–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ùå")

    elif action == "skip":
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üö´")

async def scheduler(app):
    global last_check_date
    print("[scheduler] –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
    while True:
        try:
            now_utc = datetime.datetime.utcnow()
            now = now_utc + datetime.timedelta(hours=7)
            next_day = now + datetime.timedelta(days=1)
            weekday = next_day.strftime("%A")
            print(f"[scheduler] now = {now}, next_day = {next_day}, weekday = {weekday}")

            if now.hour == 18 and 1 <= now.minute <= 4:
                if last_check_date != now.date():
                    for group in groups:
                        if weekday in group["days"]:
                            class_time = group["time"][weekday]
                            await ask_admin(app, group, class_time)
                    last_check_date = now.date()
                    await asyncio.sleep(180)
                else:
                    print("[scheduler] –£–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è")

            await asyncio.sleep(20)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –≤ scheduler")
            await asyncio.sleep(10)

async def handle_ping(request):
    return web.Response(text="I'm alive!")

async def start_webserver():
    app = web.Application()
    app.router.add_get("/", handle_ping)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 8080))
    print(f"[webserver] Starting on port {port}")
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CallbackQueryHandler(handle_callback))

    loop = asyncio.get_event_loop()
    loop.create_task(scheduler(app))
    loop.create_task(start_webserver())

    app.run_polling()

if __name__ == "__main__":
    main()
