import asyncio
import datetime
import logging
import nest_asyncio
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CallbackQueryHandler,
)

logging.basicConfig(
    filename="bot.log",  # —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª
    filemode="a",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
import os
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
GROUP_ID = os.getenv("GROUP_ID")

# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
groups = [
    {
        "name": "–°—Ç–∞—Ä—à–µ–π –Ω–∞—á–∏–Ω–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã",
        "days": ["Monday", "Wednesday", "Friday",],
        "time": "17:15",
        "thread_id": 2225,
    },
    {
        "name": "–°—Ç–∞—Ä—à–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–π –≥—Ä—É–ø–ø—ã",
        "days": ["Monday", "Wednesday", "Friday",],
        "time": "18:30",
        "thread_id": 7,
    },
    {
        "name": "–ú–ª–∞–¥—à–µ–π –≥—Ä—É–ø–ø—ã",
        "days": ["Tuesday", "Thursday",],
        "time": "17:30",
        "thread_id": 2226,
    },
]

pending = {}

cancel_messages = {
    "visa": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! üõÇ –°–µ–≥–æ–¥–Ω—è —è –Ω–∞ –≤–∏–∑–∞—Ä–∞–Ω–µ, –ø–æ—ç—Ç–æ–º—É –∑–∞–Ω—è—Ç–∏—è –Ω–µ –±—É–¥–µ—Ç. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ —Ö–æ—Ä–æ—à–æ, —É–≤–∏–¥–∏–º—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ! ‚òÄÔ∏è",
    "illness": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ü§í –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø—Ä–∏–±–æ–ª–µ–ª –∏ –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ. –ù–∞–¥–µ—é—Å—å –±—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ —Å–∫–æ—Ä–æ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –≤–∞–º–∏! –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è! üå∑",
    "unwell": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! üòå –°–µ–≥–æ–¥–Ω—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–µ–≤–∞–∂–Ω–æ –∏ –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ ‚Äî —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏! üí™",
    "unexpected": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ‚ö†Ô∏è –ü–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üòä",
    "tech": "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! ‚öôÔ∏è –°–µ–≥–æ–¥–Ω—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∑–∞–ª–µ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –£–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–µ–º, —á—Ç–æ–±—ã –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—å. –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! ü§∏‚Äç‚ôÄÔ∏è",
}

def get_decision_keyboard(group_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"yes|{group_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"no|{group_id}")],
        [InlineKeyboardButton("‚è≠ –ù–µ—Ç, –Ω–æ —è —Å–∞–º –Ω–∞–ø–∏—à—É –≤ –≥—Ä—É–ø–ø—É", callback_data=f"skip|{group_id}")],
    ])

def get_reason_keyboard(group_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ü§í –ë–æ–ª–µ–∑–Ω—å", callback_data=f"reason|{group_id}|illness")],
        [InlineKeyboardButton("üõÇ –í–∏–∑–∞—Ä–∞–Ω", callback_data=f"reason|{group_id}|visa")],
        [InlineKeyboardButton("üòå –ü–ª–æ—Ö–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ", callback_data=f"reason|{group_id}|unwell")],
        [InlineKeyboardButton("‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ", callback_data=f"reason|{group_id}|unexpected")],
        [InlineKeyboardButton("‚öôÔ∏è –¢–µ—Ö. –Ω–µ–ø–æ–ª–∞–¥–∫–∏", callback_data=f"reason|{group_id}|tech")],
    ])

async def ask_admin(app, group_id, group):
    msg = await app.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è {group['name']} –≤ {group['time']} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é?",
        reply_markup=get_decision_keyboard(group_id)
    )
    pending[msg.message_id] = group

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")
    action = data[0]
    group_id = int(data[1])
    group = groups[group_id]

    if action == "yes":
        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=group["thread_id"],
            text=f"–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è! –ó–∞–Ω—è—Ç–∏–µ –¥–ª—è {group['name']} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ {group['time']} ü§∏üèªü§∏üèª‚Äç‚ôÄÔ∏è"
        )
        await query.edit_message_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")

    elif action == "no":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–Ω—è—Ç–∏—è:", reply_markup=get_reason_keyboard(group_id))

    elif action == "reason":
        reason_key = data[2]
        message = cancel_messages.get(reason_key, "–ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.")
        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=group["thread_id"],
            text=message
        )
        await query.edit_message_text("–û—Ç–º–µ–Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ ‚ùå")

    elif action == "skip":
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º.")
    pass
    
async def scheduler(app):
    await asyncio.sleep(30)  # –¥–∞—ë–º Render –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    last_check = None

    while True:
        try:
            now_utc = datetime.datetime.utcnow()
            now = now_utc + datetime.timedelta(hours=7)
            weekday = now.strftime("%A")
            current_time = now.strftime("%H:%M")

            print(f"[scheduler] –°–µ–π—á–∞—Å {current_time} {weekday}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—É–¥–Ω–∏–π –¥–µ–Ω—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if now.hour == 11 and 1 <= now.minute <= 3:
                if last_check != now.date():
                    print("[scheduler] –í—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–æ—Å–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º")
                    for idx, group in enumerate(groups):
                        if weekday in group["days"]:
                            await ask_admin(app, idx, group)
                    last_check = now.date()
                else:
                    print("[scheduler] –£–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è")
            else:
                print("[scheduler] –ü–æ–∫–∞ –Ω–µ –≤—Ä–µ–º—è")

            await asyncio.sleep(20)

        except Exception as e:
            print(f"[scheduler] –û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(10)


# –ü—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π aiohttp —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–∞ uptime robot
async def handle_ping(request):
    return web.Response(text="I'm alive!")

async def start_webserver():
    app = web.Application()
    app.router.add_get("/", handle_ping)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CallbackQueryHandler(handle_callback))
    # –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –Ω—É–∂–Ω–∞
    asyncio.create_task(scheduler(app))
    asyncio.create_task(start_webserver())  # –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await app.run_polling()


if __name__ == "__main__":
    import time
    nest_asyncio.apply()
    while True:
        try:
            asyncio.run(main())
        except Exception as e:
            logging.exception("–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
